version: '3.8'
services:
  web:
    build: .
    restart: unless-stopped
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    ulimits:
      nofile:
        soft: 1024
        hard: 2048
    tmpfs:
      - /tmp
    depends_on:
      - redis
    environment:
      - REDIS_HOST=redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`localhost`)"
      - "traefik.http.routers.web.entrypoints=web"
      - "traefik.http.services.web.loadbalancer.server.port=8080"
      - "traefik.http.services.web.loadbalancer.server.weight=90"
    networks:
      - default

  web-canary:
    build: .
    restart: unless-stopped
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    deploy:
      replicas: 1  # Только 1 экземпляр для canary
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    ulimits:
      nofile:
        soft: 1024
        hard: 2048
    tmpfs:
      - /tmp
    depends_on:
      - redis
    environment:
      - REDIS_HOST=redis
      - VERSION=canary  # Переменная окружения для отличия версии
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web-canary.rule=Host(`localhost`)"
      - "traefik.http.routers.web-canary.entrypoints=web"
      - "traefik.http.services.web-canary.loadbalancer.server.port=8080"
      # Вес сервиса для распределения трафика
      - "traefik.http.services.web-canary.loadbalancer.sticky=false"

  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"  # Traefik Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped

  redis:
    image: redis:7.2-alpine
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.0.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    depends_on:
      - prometheus
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards


  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    ports:
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    privileged: true
    restart: unless-stopped
    command:
      - '--docker_only=true'
      - '--housekeeping_interval=10s'

  node_exporter:
    image: prom/node-exporter:v1.6.0
    ports:
      - "9100:9100"
    command:
      - '--path.rootfs=/host'
    volumes:
      - /:/host:ro
    restart: unless-stopped

  redis_exporter:
    image: oliver006/redis_exporter:v1.52.0
    environment:
      - REDIS_ADDR=redis:6379
    ports:
      - "9121:9121"
    restart: unless-stopped
    depends_on:
      - redis
  loki:
    image: grafana/loki:2.8.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.8.0
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    depends_on:
      - loki